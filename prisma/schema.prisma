// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Transaction {
  id           Int       @id @default(autoincrement())
  sender       User?     @relation(fields: [senderId], references: [id])
  senderId     Int?
  receiver     User?     @relation(name: "receiver_id", fields: [userId], references: [id])
  code         String    @unique
  currency     Currency? @relation(fields: [currencyId], references: [id])
  currencyId   Int?
  // exchangeRate Int       @map(name: "exchange_rate")
  value        Int?      @default(1000)
  status       Boolean   @default(false)

  userId Int?
  @@map("transactions")
}

model User {
  id             Int           @id @default(autoincrement())
  name           String?
  email          String?       @unique
  password       String?
  image          String?
  accountBalance Int?          @default(1000)
  transactions   Transaction[]
  createdAt      DateTime?     @default(now()) @map(name: "created_at")
  updatedAt      DateTime?     @default(now()) @map(name: "updated_at")
  Transaction    Transaction[] @relation("receiver_id")

  Account Account[]
  @@map(name: "users")
}

model Currency {
  id           Int       @id @default(autoincrement())
  code         String    @unique
  // exchangeRate Int       @map(name: "exchange_rate")
  createdAt    DateTime? @default(now()) @map(name: "created_at")
  updatedAt    DateTime? @default(now()) @map(name: "updated_at")

  Transaction Transaction[]
  Account     Account[]
  @@map(name: "currencies")
}

model Account {
  id         Int       @id @default(autoincrement())
  user       User?     @relation(fields: [userId], references: [id])
  userId     Int?
  currency   Currency? @relation(fields: [currencyId], references: [id])
  currencyId Int?
  balance    Int

  @@map(name: "bank_accounts")
}



model AccountB {
  id                 Int       @default(autoincrement()) @id
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           Int      @default(autoincrement()) @id
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

